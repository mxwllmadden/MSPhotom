[1mdiff --git a/MSPhotom/analysis/imageprocess.py b/MSPhotom/analysis/imageprocess.py[m
[1mindex 6a3fc94..7468ad8 100644[m
[1m--- a/MSPhotom/analysis/imageprocess.py[m
[1m+++ b/MSPhotom/analysis/imageprocess.py[m
[36m@@ -4,6 +4,7 @@[m [mLoad images and extract and organize trace data[m
 """[m
 from typing import List[m
 import os[m
[32m+[m[32mimport re[m
 import numpy as np[m
 from PIL import Image[m
 import time[m
[36m@@ -27,7 +28,8 @@[m [mdef process_main(data,[m
         # Update view if needed[m
         if controller is not None:[m
             controller.view.image_tab.longprog['value'] = (ind/run_path_list_len)*100[m
[31m-            controller.view.image_tab.longprogstat.set(f'Processing run {run_path.split("/")[-1]}')[m
[32m+[m[32m            controller.view.image_tab.longprogstat.set([m
[32m+[m[32m                f'Processing run {run_path.split("/")[-2]}/{run_path.split("/")[-1]}')[m
     [m
         valid_imgs = get_valid_images(run_path, data.img_prefix)[m
         if len(valid_imgs) == 0:[m
[36m@@ -59,7 +61,8 @@[m [mdef process_main(data,[m
                         in zip(data.fiber_labels, fiber_masks)}[m
     data.traces_raw_by_run_reg = traces_raw_by_run_reg[m
     data.traces_by_run_signal_trial = traces_by_run_signal_trial[m
[31m-    data.num_runs = len(traces_by_run_signal_trial)[m
[32m+[m[32m    runs_names = [f'{run_path.split("/")[-2]}/{run_path.split("/")[-1]}' for run_path in data.run_path_list][m
[32m+[m[32m    data.log('imageprocess finished processing: \n {"\n".join(runs_names)}')[m
 [m
     if controller is not None:[m
         controller.view.update_state('RG - Processing Done Ready to Input Bin')[m
[36m@@ -98,7 +101,7 @@[m [mdef get_valid_images(path, prefix):[m
     img_paths = [path for path in img_paths if path[-4:] == '.tif'][m
     prefix_len = len(prefix)[m
     img_paths = [path for path in img_paths if path[:prefix_len] == prefix][m
[31m-    img_paths = sorted(img_paths, key = lambda imgnm : int(imgnm[prefix_len+1:-4]))[m
[32m+[m[32m    img_paths = sorted(img_paths, key = lambda imgnm : int(re.sub('[^0-9]','',imgnm[prefix_len+1:-4])))[m
     return [f'{path}/{name}' for name in img_paths][m
 [m
 def npy_circlemask(sizex : int, sizey : int,circlex : int,circley : int,radius : int):[m
[36m@@ -129,9 +132,9 @@[m [mdef npy_circlemask(sizex : int, sizey : int,circlex : int,circley : int,radius :[m
     for x in range(sizex):[m
         for y in range(sizey):[m
             if ((x-circlex)**2 + (y-circley)**2)**(0.5) <= radius:[m
[31m-                mask[x,y] = 1[m
[32m+[m[32m                mask[y,x] = 1[m
             else:[m
[31m-                mask[x,y] = 0[m
[32m+[m[32m                mask[y,x] = 0[m
     return mask[m
 [m
 def subtractbackgroundsignal(traces : List[np.ndarray]): [m
[1mdiff --git a/MSPhotom/data.py b/MSPhotom/data.py[m
[1mindex 4262d3f..b0ba242 100644[m
[1m--- a/MSPhotom/data.py[m
[1m+++ b/MSPhotom/data.py[m
[36m@@ -27,8 +27,6 @@[m [mclass MSPData:[m
     img_per_trial_per_channel: int = None[m
     num_interpolated_channels: int = None[m
     roi_names: List[str] = None[m
[31m-    num_regions: int = None[m
[31m-    num_runs: int = None[m
     # File/Trace/Animal Information[m
     animal_names: List[str] = None[m
     animal_basename: str = None[m
[36m@@ -39,19 +37,17 @@[m [mclass MSPData:[m
     # Image Processing and Aquisition - Section 2, Fiber Masking[m
     fiber_labels: List[str] = None[m
     fiber_coords: List[Tuple[int, int, int, int]] = None[m
[31m-[m
     fiber_masks: Dict[str, np.ndarray] = None[m
[31m-[m
     traces_raw_by_run_reg: Dict[str, Dict[str, np.ndarray]] = None[m
     traces_by_run_signal_trial: Dict[str, Dict[str, np.ndarray]] = None[m
     [m
[31m-    def log(self, msg : str):[m
[31m-        self.logs.append(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} - {msg}')[m
[31m-[m
[31m-    bin_size: int = None[m
[31m-[m
[32m+[m[32m    # Regression[m
[32m+[m[32m    regression_bin_size: int = None[m
     corrsig_reg_results: Dict[str, Dict[str, np.ndarray]] = None[m
     regressed_traces_by_run_signal_trial: Dict[str, Dict[str, np.ndarray]] = None[m
[32m+[m[41m    [m
[32m+[m[32m    def log(self, msg : str):[m
[32m+[m[32m        self.logs.append(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} - {msg}')[m
 [m
 [m
 class DataManager:[m
[36m@@ -75,24 +71,22 @@[m [mclass DataManager:[m
         traces = self.data.traces_by_run_signal_trial[m
         regressed_traces = self.data.regressed_traces_by_run_signal_trial[m
 [m
[31m-        def write_dict_to_hdf5(group, d):[m
[31m-            for key, value in d.items():[m
[31m-                if isinstance(value, dict):[m
[31m-                    sub_group = group.create_group(key)[m
[31m-                    write_dict_to_hdf5(sub_group, value)[m
[31m-                elif isinstance(value, list):[m
[31m-                    group.create_dataset(key, data=value)[m
[31m-                elif isinstance(value, np.ndarray):[m
[31m-                    group.create_dataset(key, data=value)[m
[31m-                else:[m
[31m-                    group.attrs[key] = value[m
[31m-[m
         with h5py.File(path, 'w') as hdf5_file:[m
[31m-            if traces:[m
[32m+[m[32m            if traces is not None:[m
                 traces_group = hdf5_file.create_group('traces_by_run_signal_trial')[m
[31m-                write_dict_to_hdf5(traces_group, traces)[m
[31m-            if regressed_traces:[m
[32m+[m[32m                unpack_dict_to_hdf5(traces_group, traces)[m
[32m+[m[32m            if regressed_traces is not None:[m
                 regressed_traces_group = hdf5_file.create_group('regressed_traces_by_run_signal_trial')[m
[31m-                write_dict_to_hdf5(regressed_traces_group, regressed_traces)[m
[31m-[m
[31m-[m
[32m+[m[32m                unpack_dict_to_hdf5(regressed_traces_group, regressed_traces)[m
[32m+[m
[32m+[m[32mdef unpack_dict_to_hdf5(group, d):[m
[32m+[m[32m    for key, value in d.items():[m
[32m+[m[32m        if isinstance(value, dict):[m
[32m+[m[32m            sub_group = group.create_group(key)[m
[32m+[m[32m            unpack_dict_to_hdf5(sub_group, value)[m
[32m+[m[32m        elif isinstance(value, list):[m
[32m+[m[32m            group.create_dataset(key, data=value)[m
[32m+[m[32m        elif isinstance(value, np.ndarray):[m
[32m+[m[32m            group.create_dataset(key, data=value)[m
[32m+[m[32m        else:[m
[32m+[m[32m            group.attrs[key] = value[m
[1mdiff --git a/MSPhotom/main.py b/MSPhotom/main.py[m
[1mindex b24524a..f4f3256 100644[m
[1m--- a/MSPhotom/main.py[m
[1m+++ b/MSPhotom/main.py[m
[36m@@ -5,13 +5,14 @@[m [mContains Controller Class for the App[m
 Define all app behavior/events in this class.[m
 """[m
 [m
[31m-from tkinter import filedialog[m
[32m+[m[32mfrom tkinter import filedialog, messagebox[m
 import os[m
 from PIL import Image, ImageTk[m
 import threading[m
 from typing import List, Tuple[m
 from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg[m
[31m-import tkinter as tkk[m
[32m+[m[32mfrom matplotlib import pyplot as pp[m
[32m+[m[32mimport tkinter as tk[m
 from MSPhotom.data import MSPData, DataManager[m
 from MSPhotom.gui.main import AppView[m
 from MSPhotom import analysis[m
[36m@@ -67,6 +68,8 @@[m [mclass MSPApp:[m
         )[m
         self.refresh_data_view()[m
         self.view.update_state('IP - Parameter Entry')[m
[32m+[m[41m    [m
[32m+[m[32m    def run(self):[m
         self.view.mainloop()[m
 [m
     def get_image_directory(self):[m
[36m@@ -154,17 +157,20 @@[m [mclass MSPApp:[m
         self.data.img_date_range: Tuple[str, str] = (date_start.get(),[m
                                                      date_end.get())[m
         self.data.animal_names: List[str] = animal_names[m
[32m+[m[32m        self.data.animal_basename: str = ani_prefix[m
         self.data.run_path_list: List[str] = run_paths[m
         self.data.img_prefix: str = img_prefix[m
         self.data.img_per_trial_per_channel: int = img_per_trial_per_channel[m
         self.data.num_interpolated_channels: int = num_interpolated_channels[m
         self.data.roi_names: List[str] = roi_names[m
 [m
[31m-[m
     def region_selection(self):[m
         """[m
         Generate a popup region selection window and define its behavior.[m
         """[m
[32m+[m[32m        if len(self.data.run_path_list) == 0:[m
[32m+[m[32m            messagebox('No Paths Loaded')[m
[32m+[m[32m            return[m
         self.view.update_state('None')[m
         self.data_regsel = {'ROIs':[m
                             ['Background Fiber', 'Correction Fiber'][m
[36m@@ -193,8 +199,18 @@[m [mclass MSPApp:[m
         frpath = self.data.run_path_list[0][m
         imprefix = self.data.img_prefix[m
         impath = f'{frpath}/{imprefix}_2.tif'[m
[32m+[m[32m        impath2 = f'{frpath}/{imprefix}_1.tif'[m
[32m+[m[32m        cmap = pp.get_cmap('nipy_spectral')[m
         with Image.open(impath) as im:[m
[31m-            return ImageTk.PhotoImage(im)[m
[32m+[m[32m            np_im = np.asarray(im)[m
[32m+[m[32m        with Image.open(impath2) as im2:[m
[32m+[m[32m            np_im2 = np.asarray(im2)[m
[32m+[m[32m        np_im = np_im2 / np_im[m
[32m+[m[32m        np_im = np_im - np_im.min()[m
[32m+[m[32m        np_im = np_im / np_im.max()[m
[32m+[m[32m        im_array : np.ndarray = np.asarray(cmap(np_im))*255[m
[32m+[m[32m        im_array : np.ndarray = im_array.astype(np.uint8)[:,:,:3][m
[32m+[m[32m        return ImageTk.PhotoImage(Image.fromarray(im_array, mode='RGB'))[m
 [m
     def region_selection_prematureclose(self, event):[m
         """[m
[36m@@ -287,9 +303,10 @@[m [mclass MSPApp:[m
         file = filedialog.asksaveasfilename(defaultextension='.h5',[m
                                             filetypes=[('HDF5 files', '*.h5')],[m
                                             title='Save HDF5 File')[m
[31m-        if file is not None:[m
[31m-            manage = DataManager(self.data)[m
[31m-            manage.saveto_h5(file)[m
[32m+[m[32m        if file is None:[m
[32m+[m[32m            return[m
[32m+[m[32m        manage = DataManager(self.data)[m
[32m+[m[32m        manage.saveto_h5(file)[m
 [m
     def load_data(self):[m
         """[m
[36m@@ -302,14 +319,37 @@[m [mclass MSPApp:[m
                                           filetypes=[[m
                                               ('Python Pickle', '*.pkl')],[m
                                           title='Load Data')[m
[31m-        if file is not None:[m
[31m-            manage = DataManager(self.data)[m
[31m-            self.data = MSPData(**manage.load(file).__dict__)[m
[32m+[m[32m        if file is None:[m
[32m+[m[32m            return[m
[32m+[m[32m        manage = DataManager(self.data)[m
[32m+[m[32m        self.data = MSPData(**manage.load(file).__dict__)[m
[32m+[m[32m        self.unpack_params_from_data()[m
         self.set_state_based_on_data()[m
         # This logic is here to clear the graph plot is a new pickle file is loaded[m
         for widget in self.view.regression_tab.graphcanvas.winfo_children():[m
             widget.destroy()[m
[31m-[m
[32m+[m[41m            [m
[32m+[m[32m    def unpack_params_from_data(self):[m
[32m+[m[32m        loaded_data = self.data.__dict__.copy()[m
[32m+[m[32m        loaded_data['animal_start'] = 0[m
[32m+[m[32m        loaded_data['animal_end'] = 100[m
[32m+[m[32m        if loaded_data['img_date_range'] is not None:[m
[32m+[m[32m            loaded_data['date_start'] = loaded_data['img_date_range'][0][m
[32m+[m[32m            loaded_data['date_end'] = loaded_data['img_date_range'][1][m
[32m+[m[32m        corresponding_params = {'target_directory' : self.view.image_tab.topdirectory,[m
[32m+[m[32m                                'date_start' : self.view.image_tab.date_start,[m
[32m+[m[32m                                'date_end':self.view.image_tab.date_end,[m
[32m+[m[32m                                'animal_prefix' : self.view.image_tab.ani_prefix,[m
[32m+[m[32m                                'animal_start' : self.view.image_tab.ani_start,[m
[32m+[m[32m                                'animal_end' : self.view.image_tab.ani_end,[m
[32m+[m[32m                                'img_prefix' : self.view.image_param_tab.img_prefix,[m
[32m+[m[32m                                'img_per_trial_per_channel' : self.view.image_param_tab.img_per_trial_per_channel,[m
[32m+[m[32m                                'num_interpolated_channels' : self.view.image_param_tab.num_interpolated_channels,[m
[32m+[m[32m                                }[m
[32m+[m[32m        for key, param in corresponding_params.items():[m
[32m+[m[32m            if key in loaded_data.keys():[m
[32m+[m[32m                if loaded_data[key] is not None:[m
[32m+[m[32m                    param.set(loaded_data[key])[m
 [m
     def reset_regression(self):[m
         """[m
[36m@@ -336,15 +376,15 @@[m [mclass MSPApp:[m
             bin_size.set('ERROR')[m
             return[m
         bin_size = int(bin_size)[m
[31m-        self.data.num_regions = list(filter(None, self.data.roi_names))[m
[31m-        self.view.regression_tab.num_regs.set(f'{self.data.num_regions}')[m
[31m-        self.view.regression_tab.num_runs.set(f'{self.data.num_runs} Run(s)')[m
[32m+[m[32m        num_regions = list(filter(None, self.data.roi_names))[m
[32m+[m[32m        self.view.regression_tab.num_regs.set(f'{num_regions}')[m
[32m+[m[32m        num_runs = len(self.data.traces_by_run_signal_trial)[m
[32m+[m[32m        self.view.regression_tab.num_runs.set(f'{num_runs} Run(s)')[m
         self.view.update_state('RG - Ready to Regress')[m
         self.data.bin_size: int = bin_size[m
 [m
     def regress_fibers(self):[m
         # Update View[m
[31m-        # in between[m
         self.view.update_state('RG - Regressing')[m
         # Create and initialize the thread for image loading/processing[m
         regress_thread = threading.Thread(target=analysis.regression.regression_main,[m
[36m@@ -364,8 +404,6 @@[m [mclass MSPApp:[m
         self.view.regression_tab.ch_selector.set(ch_options[1])[m
         self.view.regression_tab.reg_selector.set(reg_options[0])[m
 [m
[31m-[m
[31m-[m
     def update_canvas_with_plot(self, mode):[m
         """[m
         Updates Plot with corrsig regression test figure[m
[36m@@ -411,7 +449,7 @@[m [mclass MSPApp:[m
         canvas_widget = canvas.get_tk_widget()[m
 [m
         # Pack the widget into the graphcanvas[m
[31m-        canvas_widget.pack(fill=tkk.BOTH, expand=True)[m
[32m+[m[32m        canvas_widget.pack(fill=tk.BOTH, expand=True)[m
 [m
         # Ensure the graphcanvas is set to the correct size[m
         self.view.regression_tab.graphcanvas.config(width=330, height=330)[m
[36m@@ -549,5 +587,5 @@[m [mdef channel_test_graph(trial_data_x, trial_data_y, graph_reg, graph_ch, graph_tr[m
     return fig[m
 [m
 if __name__ == '__main__':[m
[31m-    MSPApp()[m
[32m+[m[32m    MSPApp().run()[m
 [m
[1mdiff --git a/app_scripts/MSPhotom_AppInspector.py b/app_scripts/MSPhotom_AppInspector.py[m
[1mdeleted file mode 100644[m
[1mindex 71d7d86..0000000[m
[1m--- a/app_scripts/MSPhotom_AppInspector.py[m
[1m+++ /dev/null[m
[36m@@ -1,84 +0,0 @@[m
[31m-# -*- coding: utf-8 -*-[m
[31m-"""[m
[31m-Contains resources for inspecting or changing the behavior of the MSPhotom[m
[31m-Application.[m
[31m-[m
[31m-Created on Wed Aug  7 10:07:07 2024[m
[31m-[m
[31m-@author: mbmad[m
[31m-"""[m
[31m-[m
[31m-from MSPhotom import MSPApp[m
[31m-import threading[m
[31m-from copy import deepcopy[m
[31m-import os[m
[31m-import time[m
[31m-[m
[31m-class AppInspector:[m
[31m-    def __init__(self):[m
[31m-        self._reporter = {'APP' : None,[m
[31m-                          'STATUS' : 'RUN'}[m
[31m-      