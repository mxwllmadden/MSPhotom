[1mdiff --git a/MSPhotom/gui/data.py b/MSPhotom/gui/data.py[m
[1mindex c7ba7a4..202cfb5 100644[m
[1m--- a/MSPhotom/gui/data.py[m
[1m+++ b/MSPhotom/gui/data.py[m
[36m@@ -32,9 +32,9 @@[m [mclass DataTab(tk.Frame):[m
             label = tk.Label(self, text = key)[m
             label.grid(column = 0, row=ind+1, columnspan=2)[m
             self.current.append(label)[m
[31m-            if isinstance(item, (int,str,float)):[m
[32m+[m[32m            if isinstance(item, (int,str,float)) or key == 'roi_names':[m
                 disp_item = str(item)[m
[31m-            elif isinstance(item, (list,dict)):[m
[32m+[m[32m            elif isinstance(item, (dict,list)):[m
                 disp_item = f'Contains {len(item)} items'[m
             elif item is None:[m
                 disp_item = 'NA'[m
[1mdiff --git a/MSPhotom/inspectiontools.py b/MSPhotom/inspectiontools.py[m
[1mindex d0217ee..7e44fec 100644[m
[1m--- a/MSPhotom/inspectiontools.py[m
[1m+++ b/MSPhotom/inspectiontools.py[m
[36m@@ -7,38 +7,11 @@[m [mCreated on Wed Aug  7 10:07:07 2024[m
 [m
 @author: mbmad[m
 """[m
[31m-[m
 from MSPhotom import MSPApp[m
[31m-import threading[m
[31m-from copy import deepcopy[m
[31m-import os[m
[31m-import time[m
[32m+[m[32mfrom MSPhotom.mxtools.classes import create_monitored_class, MonitoredClass[m
[32m+[m
[32m+[m[32mMSPInspector = create_monitored_class(MSPApp)[m
 [m
[31m-class Meta_MSPApp(MSPApp):[m
[31m-    meta_triggered_on_call = {}[m
[31m-    meta_triggered_on_return = {}[m
[31m-    [m
[31m-    def __new__(cls, name, bases, nmspc):[m
[31m-        def monitored_method(name, fn):[m
[31m-            def wrapper(*args, **kwargs):[m
[31m-                #Premethod[m
[31m-                result = fn(*args, **kwargs)[m
[31m-                #Postmethod[m
[31m-                return result[m
[31m-            return wrapper[m
[31m-        [m
[31m-        for obj_name, obj in nmspc.items():[m
[31m-            if callable(obj) and 'meta' not in obj_name and '__' not in obj_name:[m
[31m-                nmspc[obj_name] = monitored_method(obj_name, obj)[m
[31m-        return super().__new__(cls, name, bases, nmspc)[m
[31m-    [m
[31m-    def __init__(self):[m
[31m-        self.meta_triggered_on_call = {}[m
[31m-        self.meta_triggered_on_return = {}[m
[31m-        [m
[31m-    def run(self, *args):[m
[31m-        super().run(self)[m
[31m-        return {arg : self.__dict__[arg] for arg in args}[m
 [m
 if __name__ == '__main__':[m
[31m-    data = Meta_MSPApp().run('data')[m
\ No newline at end of file[m
[32m+[m[32m    MSPInspector().run()[m
\ No newline at end of file[m
[1mdiff --git a/MSPhotom/inspectiontools/MSPhotom_AppInspector.py b/MSPhotom/inspectiontools/MSPhotom_AppInspector.py[m
[1mdeleted file mode 100644[m
[1mindex 71d7d86..0000000[m
[1m--- a/MSPhotom/inspectiontools/MSPhotom_AppInspector.py[m
[1m+++ /dev/null[m
[36m@@ -1,84 +0,0 @@[m
[31m-# -*- coding: utf-8 -*-[m
[31m-"""[m
[31m-Contains resources for inspecting or changing the behavior of the MSPhotom[m
[31m-Application.[m
[31m-[m
[31m-Created on Wed Aug  7 10:07:07 2024[m
[31m-[m
[31m-@author: mbmad[m
[31m-"""[m
[31m-[m
[31m-from MSPhotom import MSPApp[m
[31m-import threading[m
[31m-from copy import deepcopy[m
[31m-import os[m
[31m-import time[m
[31m-[m
[31m-class AppInspector:[m
[31m-    def __init__(self):[m
[31m-        self._reporter = {'APP' : None,[m
[31m-                          'STATUS' : 'RUN'}[m
[31m-        self.app_thread = threading.Thread(target = initialize_app,[m
[31m-                                           args=(self._reporter,),[m
[31m-                                           daemon=True)[m
[31m-        self.monitor_thread = threading.Thread(target= self._monitorapp,[m
[31m-                                               daemon=True)[m
[31m-        self.app_thread.start()[m
[31m-        self.app = self.waitfor('APP')[m
[31m-        self.monitor_thread.start()[m
[31m-        [m
[31m-    def waitfor(self, index, limit = 20):[m
[31m-        count = 0[m
[31m-        while True:[m
[31m-            time.sleep(1)[m
[31m-            count += 1[m
[31m-            if self._reporter[index] is not None:[m
[31m-                break[m
[31m-            if limit is not None:[m
[31m-                if count > limit:[m
[31m-                    print('Waitfor limit exceeded')[m
[31m-                    break[m
[31m-        return self._reporter[index][m
[31m-     [m
[31m-    def waitfor_change(self, index, limit = None):[m
[31m-        try:[m
[31m-            old_val = self._reporter[index][m
[31m-        except KeyError:[m
[31m-            self._reporter[index] = None[m
[31m-            self._reporter[index] = self.waitfor(index, limit = limit)[m
[31m-            old_val = self._reporter[index][m
[31m-        count = 0[m
[31m-        while True:[m
[31m-            time.sleep(1)[m
[31m-            count += 1[m
[31m-            if self._reporter[index] != old_val:[m
[31m-                break[m
[31m-            if limit is not None:[m
[31m-                if count > limit:[m
[31m-                    print('Waitfor limit exceeded')[m
[31m-                    break[m
[31m-        return self._reporter[index][m
[31m-[m
[31m-    def _monitorapp(self):[m
[31m-        while True:[m
[31m-            time.sleep(1)[m
[31m-            if self._reporter['STATUS'] == 'KILL':[m
[31m-                break[m
[31m-            self._reporter['data_ref'] = self.app.data[m
[31m-            self.data = self.app.data[m
[31m-            self._reporter.update(self.app.data.__dict__)[m
[31m-[m
[31m-    def close(self):[m
[31m-        print('Initiating gracefull closure of monitor thread...')[m
[31m-        self._reporter['STATUS'] = 'KILL'[m
[31m-        self.monitor_thread.join()[m
[31m-        print('Monitor Thread Closed')[m
[31m-        print('Close the App Manually')[m
[31m-[m
[31m-def initialize_app(reporter):[m
[31m-    app = MSPApp()[m
[31m-    reporter['APP'] = app[m
[31m-    app.run()[m
[31m-[m
[31m-if __name__ == '__main__':[m
[31m-    Inspector = AppInspector()[m
[1mdiff --git a/MSPhotom/main.py b/MSPhotom/main.py[m
[1mindex f4f3256..28753ab 100644[m
[1m--- a/MSPhotom/main.py[m
[1m+++ b/MSPhotom/main.py[m
[36m@@ -19,6 +19,8 @@[m [mfrom MSPhotom import analysis[m
 import matplotlib.pyplot as plt[m
 from matplotlib.figure import Figure[m
 import numpy as np[m
[32m+[m[32mfrom copy import deepcopy[m
[32m+[m
 [m
 class MSPApp:[m
     def __init__(self):[m
[36m@@ -64,11 +66,11 @@[m [mclass MSPApp:[m
         self.view.regression_tab.graph_corrsig_button.config([m
             command=lambda: self.update_canvas_with_plot(1))[m
         self.view.regression_tab.graph_channel_button.config([m
[31m-            command=lambda: self.update_canvas_with_plot(2)[m
[31m-        )[m
[32m+[m[32m            command=lambda: self.update_canvas_with_plot(2))[m
[32m+[m
         self.refresh_data_view()[m
         self.view.update_state('IP - Parameter Entry')[m
[31m-    [m
[32m+[m
     def run(self):[m
         self.view.mainloop()[m
 [m
[36m@@ -101,7 +103,7 @@[m [mclass MSPApp:[m
         num_interpolated_channels = self.view.image_param_tab.num_interpolated_channels[m
         roi_names = [var.get() for var in self.view.image_param_tab.roi_names][m
         roi_names = [name.replace('_', '') for name in roi_names][m
[31m-        [m
[32m+[m
         # Check to ensure user input is appropriate[m
         if not os.path.exists(target_directory):[m
             self.view.image_tab.topdirectory.set('BAD PATH')[m
[36m@@ -128,7 +130,7 @@[m [mclass MSPApp:[m
             num_interpolated_channels.set('ERROR')[m
             return[m
         num_interpolated_channels = int(num_interpolated_channels.get())[m
[31m-        [m
[32m+[m
         # Generate candidate run path and filter to only existing paths[m
         candidate_date_paths = [target_directory+"/"+numtodate(date)[m
                                 for date in range(date_start_num, date_end_num+1)][m
[36m@@ -184,7 +186,7 @@[m [mclass MSPApp:[m
                             }[m
         popout = self.view.popout_regsel(reg_names=self.data_regsel['ROIs'],[m
                                          img=self.data_regsel['displayimg'])[m
[31m-        [m
[32m+[m
         popout.bind('<Destroy>', self.region_selection_prematureclose)[m
         self.view.regsel.selectioncanvas.bind([m
             "<B1-Motion>", self.region_selection_drag)[m
[36m@@ -208,8 +210,8 @@[m [mclass MSPApp:[m
         np_im = np_im2 / np_im[m
         np_im = np_im - np_im.min()[m
         np_im = np_im / np_im.max()[m
[31m-        im_array : np.ndarray = np.asarray(cmap(np_im))*255[m
[31m-        im_array : np.ndarray = im_array.astype(np.uint8)[:,:,:3][m
[32m+[m[32m        im_array: np.ndarray = np.asarray(cmap(np_im))*255[m
[32m+[m[32m        im_array: np.ndarray = im_array.astype(np.uint8)[:, :, :3][m
         return ImageTk.PhotoImage(Image.fromarray(im_array, mode='RGB'))[m
 [m
     def region_selection_prematureclose(self, event):[m
[36m@@ -311,7 +313,7 @@[m [mclass MSPApp:[m
     def load_data(self):[m
         """[m
         Load data from pickle file[m
[31m-        [m
[32m+[m
         UNSAFE! Depickling allows the execution of arbitrary code. You should[m
         NEVER open a pickle file from a non-trusted source.[m
         """[m
[36m@@ -328,23 +330,23 @@[m [mclass MSPApp:[m
         # This logic is here to clear the graph plot is a new pickle file is loaded[m
         for widget in self.view.regression_tab.graphcanvas.winfo_children():[m
             widget.destroy()[m
[31m-            [m
[32m+[m
     def unpack_params_from_data(self):[m
[31m-        loaded_data = self.data.__dict__.copy()[m
[32m+[m[32m        loaded_data = deepcopy(self.data.__dict__)[m
         loaded_data['animal_start'] = 0[m
         loaded_data['animal_end'] = 100[m
         if loaded_data['img_date_range'] is not None:[m
             loaded_data['date_start'] = loaded_data['img_date_range'][0][m
             loaded_data['date_end'] = loaded_data['img_date_range'][1][m
[31m-        corresponding_params = {'target_directory' : self.view.image_tab.topdirectory,[m
[31m-                                'date_start' : self.view.image_tab.date_start,[m
[31m-                                'date_end':self.view.image_tab.date_end,[m
[31m-                                'animal_prefix' : self.view.image_tab.ani_prefix,[m
[31m-                                'animal_start' : self.view.image_tab.ani_start,[m
[31m-                                'animal_end' : self.view.image_tab.ani_end,[m
[31m-                                'img_prefix' : self.view.image_param_tab.img_prefix,[m
[31m-                                'img_per_trial_per_channel' : self.view.image_param_tab.img_per_trial_per_channel,[m
[31m-                                'num_interpolated_channels' : self.view.image_param_tab.num_interpolated_channels,[m
[32m+[m[32m        corresponding_params = {'target_directory': self.view.image_tab.topdirectory,[m
[32m+[m[32m                                'date_start': self.view.image_tab.date_start,[m
[32m+[m[32m                                'date_end': self.view.image_tab.date_end,[m
[32m+[m[32m                                'animal_prefix': self.view.image_tab.ani_prefix,[m
[32m+[m[32m                                'animal_start': self.view.image_tab.ani_start,[m
[32m+[m[32m                                'animal_end': self.view.image_tab.ani_end,[m
[32m+[m[32m                                'img_prefix': self.view.image_param_tab.img_prefix,[m
[32m+[m[32m                                'img_per_trial_per_channel': self.view.image_param_tab.img_per_trial_per_channel,[m
[32m+[m[32m                                'num_interpolated_channels': self.view.image_param_tab.num_interpolated_channels,[m
                                 }[m
         for key, param in corresponding_params.items():[m
             if key in loaded_data.keys():[m
[36m@@ -388,13 +390,14 @@[m [mclass MSPApp:[m
         self.view.update_state('RG - Regressing')[m
         # Create and initialize the thread for image loading/processing[m
         regress_thread = threading.Thread(target=analysis.regression.regression_main,[m
[31m-                                        args=(self.data,[m
[31m-                                              self),[m
[31m-                                        daemon=True)[m
[32m+[m[32m                                          args=(self.data,[m
[32m+[m[32m                                                self),[m
[32m+[m[32m                                          daemon=True)[m
         regress_thread.start()[m
         run_options = list(self.data.traces_by_run_signal_trial.keys())[m
         reg_options = self.data.roi_names[m
[31m-        ch_options = [f'ch{n}' for n in range(self.data.num_interpolated_channels)][m
[32m+[m[32m        ch_options = [f'ch{n}' for n in range([m
[32m+[m[32m            self.data.num_interpolated_channels)][m
         # print(run_options)[m
         self.view.regression_tab.run_selector['values'] = run_options[m
         self.view.regression_tab.reg_selector['values'] = reg_options[m
[36m@@ -424,7 +427,8 @@[m [mclass MSPApp:[m
             corrsig_data = self.data.traces_by_run_signal_trial[graph_run][corrsig_key][m
             trial_data_y = trace_data[graph_trial - 1, :][m
             trial_data_x = corrsig_data[graph_trial - 1, :][m
[31m-            fig = corrsig_test_graph(trial_data_x, trial_data_y, graph_reg, graph_ch, graph_trial)[m
[32m+[m[32m            fig = corrsig_test_graph([m
[32m+[m[32m                trial_data_x, trial_data_y, graph_reg, graph_ch, graph_trial)[m
         elif mode == 2:[m
             trace_key = f'{graph_reg}_{graph_ch}'[m
             ch0_key = f'{graph_reg}_ch0'[m
[36m@@ -432,14 +436,17 @@[m [mclass MSPApp:[m
             ch0_data = self.data.corrsig_reg_results[graph_run][ch0_key][m
             trial_data_y = trace_data[:, graph_trial - 1][m
             trial_data_x = ch0_data[:, graph_trial - 1][m
[31m-            fig = channel_test_graph(trial_data_x, trial_data_y, graph_reg, graph_ch, graph_trial)[m
[32m+[m[32m            fig = channel_test_graph([m
[32m+[m[32m                trial_data_x, trial_data_y, graph_reg, graph_ch, graph_trial)[m
         # Set the figure size to fit the canvas[m
         fig.set_size_inches(self.view.regression_tab.graphcanvas.winfo_width() / fig.get_dpi(),[m
                             self.view.regression_tab.graphcanvas.winfo_height() / fig.get_dpi())[m
 [m
         # Create a FigureCanvasTkAgg object from the Figure with the graphcanvas as master[m
[31m-        fig.subplots_adjust(left=0.12, right=.95, top=.945, bottom=0.11, wspace=0.4, hspace=0.4)[m
[31m-        canvas = FigureCanvasTkAgg(fig, master=self.view.regression_tab.graphcanvas)[m
[32m+[m[32m        fig.subplots_adjust(left=0.12, right=.95, top=.945,[m
[32m+[m[32m                            bottom=0.11, wspace=0.4, hspace=0.4)[m
[32m+[m[32m        canvas = FigureCanvasTkAgg([m
[32m+[m[32m            fig, master=self.view.regression_tab.graphcanvas)[m
         canvas.draw()  # Draw the plot[m
 [m
         # Clear any existing widgets in the graphcanvas[m
[36m@@ -455,7 +462,6 @@[m [mclass MSPApp:[m
         self.view.regression_tab.graphcanvas.config(width=330, height=330)[m
         self.view.update_state('RG - Graphing Done')[m
 [m
[31m-[m
     def set_state_based_on_data(self):[m
         """[m
         Based on the stored data in data object, update view.[m
[36m@@ -501,6 +507,7 @@[m [mclass MSPApp:[m
             self.view.update_state('IP - Parameter Entry')[m
             return[m
 [m
[32m+[m
 def multikey(x, *args):[m
     """[m
     Parameters[m
[36m@@ -518,9 +525,13 @@[m [mdef multikey(x, *args):[m
     """[m
     result = [][m
     for arg in args:[m
[31m-        result.append(x[arg])[m
[32m+[m[32m        if arg in x.keys():[m
[32m+[m[32m            result.append(x[arg])[m
[32m+[m[32m        else:[m
[32m+[m[32m            result.append(None)[m
     return result[m
 [m
[32m+[m
 def datetonum(date: str):[m
     """[m
     Convert a date string in the format 'MM-DD-YY' to a numerical representation.[m
[36m@@ -536,7 +547,7 @@[m [mdef datetonum(date: str):[m
         Date in numerical format.[m
 [m
     """[m
[31m-    [m
[32m+[m
     if len(date) != 8:[m
         return False[m
     if date[2] != "-" or date[5] != "-":[m
[36m@@ -546,35 +557,41 @@[m [mdef datetonum(date: str):[m
         mdyextract = [int(i) for i in mdyextract][m
         return ((mdyextract[1]) + (mdyextract[0]*40) + (mdyextract[2]*500))[m
     return False[m
[31m-    [m
[32m+[m
[32m+[m
 def numtodate(numcode: int):[m
     assert isinstance(numcode, int), 'numtodate accepts integers only'[m
     y, d = divmod(numcode, 500)[m
[31m-    m, d = divmod(d,40)[m
[32m+[m[32m    m, d = divmod(d, 40)[m
     return (str(m).zfill(2)+"-"+str(d).zfill(2)+"-"+str(y).zfill(2))[m
 [m
[32m+[m
 def corrsig_test_graph(trial_data_x, trial_data_y, graph_reg, graph_ch, graph_trial):[m
 [m
     plt.style.use('fivethirtyeight')[m
     fig = Figure(figsize=(7, 5))[m
     ax = fig.add_subplot(111)[m
[31m-    ax.plot(np.unique(trial_data_x), np.poly1d(np.polyfit(trial_data_x, trial_data_y, 1))(np.unique(trial_data_x)),  color='red', linewidth=2, zorder=1)[m
[32m+[m[32m    ax.plot(np.unique(trial_data_x), np.poly1d(np.polyfit(trial_data_x, trial_data_y, 1))([m
[32m+[m[32m        np.unique(trial_data_x)),  color='red', linewidth=2, zorder=1)[m
     ax.scatter(trial_data_x, trial_data_y, zorder=2)[m
     ax.set_xlabel('Corrsig-Fiber Values', fontsize=8)[m
     ax.set_ylabel(f'{graph_reg}-Fiber Trace Values', fontsize=8)[m
[31m-    ax.set_title(f'{graph_reg}-Fiber Against Corr-Fiber in {graph_ch}(Trial: {graph_trial})', fontsize=8)[m
[32m+[m[32m    ax.set_title([m
[32m+[m[32m        f'{graph_reg}-Fiber Against Corr-Fiber in {graph_ch}(Trial: {graph_trial})', fontsize=8)[m
     ax.tick_params(axis='both', which='major', labelsize=6)[m
     ax.tick_params(axis='both', which='minor', labelsize=4)[m
 [m
     return fig[m
 [m
[32m+[m
 def channel_test_graph(trial_data_x, trial_data_y, graph_reg, graph_ch, graph_trial):[m
 [m
     # plt.scatter(trial_data_x, trial_data_y, label='Data Points')[m
     plt.style.use('fivethirtyeight')[m
     fig = Figure(figsize=(7, 5))[m
     ax = fig.add_subplot(111)[m
[31m-    ax.plot(np.unique(trial_data_x), np.poly1d(np.polyfit(trial_data_x, trial_data_y, 1))(np.unique(trial_data_x)),  color='red', linewidth=2, zorder=1)[m
[32m+[m[32m    ax.plot(np.unique(trial_data_x), np.poly1d(np.polyfit(trial_data_x, trial_data_y, 1))([m
[32m+[m[32m        np.unique(trial_data_x)),  color='red', linewidth=2, zorder=1)[m
     ax.scatter(trial_data_x, trial_data_y, zorder=2)[m
 [m
     # Add labels and legend[m
[36m@@ -586,6 +603,6 @@[m [mdef channel_test_graph(trial_data_x, trial_data_y, graph_reg, graph_ch, graph_tr[m
 [m
     return fig[m
 [m
[32m+[m
 if __name__ == '__main__':[m
     MSPApp().run()[m
[31m-[m
[1mdiff --git a/app_scripts/analyze_new_runs_only.py b/app_scripts/analyze_new_runs_only.py[m
[1mdeleted file mode 100644[m
[1mindex bf13b05..0000000[m
[1m--- a/app_scripts/analyze_new_runs_only.py[m
[1m+++ /dev/null[m
[36m@@ -1,45 +0,0 @@[m
[31m-# -*- coding: utf-8 -*-[m
[31m-"""[m
[31m-Created on Wed Aug  7 13:50:39 2024[m
[31m-[m
[31m-@author: mbmad[m
[31m-"""[m
[31m-[m
[31m-from app_scripts.MSPhotom_AppInspector import AppInspector[m
[31m-from copy import deepcopy[m
[31m-[m
[31m-inspector = AppInspector()[m
[31m-print('Please open data file to update')[m
[31m-data = inspector.waitfor_change('data_ref')[m
[31m-inspector.data = data[m
[31m-print('Looking for existance of valid masks')[m
[31m-inspector.waitfor('fiber_masks', limit = None)[m
[31m-[m
[31m-old_data = deepcopy(data)[m
[31m-[m
[31m-print('Confirmed that data object is ready, enabling parameter edits')[m
[31m-inspector.app.view.update_state('IP - Parameter Entry')[m
[31m-print('Load runs when ready')[m
[31m-inspector.data.run_path_list = None[m
[31m-detected_runs = inspector.waitfor('run_path_list', limit = None)[m
[31m-print(f'Identified {len(detected_runs)} available runs')[m
[31m-old_runs = old_data.run_path_list[m
[31m-runs_already_analysed = [f'{runpath.split("/")[-2]}/{runpath.split("/")[-1]}'[m
[31m-                         for runpath in old_runs][m
[31m-new_runs = [run for run in data.run_path_list if [m
[31m-            all([old_run not in run for old_run in runs_already_analysed])][m
[31m-print(f'Identified {len(new_runs)} new runs:')[m
[31m-for run in new_runs: print(run)[m
[31m-input('\nPress Enter to Begin Processing New Runs...')[m
[31m-[m
[31m-data.run_path_list = new_runs[m
[31m-data.traces_by_run_signal_trial = None[m
[31m-inspector.app.processimages()[m
[31m-inspector.waitfor('traces_by_run_signal_trial', limit = None)[m
[31m-data.run_path_list = [*old_runs, *data.run_path_list][m
[31m-data.traces_raw_by_run_reg = {**old_data.traces_raw_by_run_reg,[m
[31m-                                  **data.traces_raw_by_run_reg}[m
[31m-data.traces_by_run_signal_trial = {**old_data.traces_by_run_signal_trial,[m
[31m-                                  **data.traces_by_run_signal_trial}[m
[31m-print('Please save data manually via app')[m
[31m-inspector.close()[m
\ No newline at end of file[m
