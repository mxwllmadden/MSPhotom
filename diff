[1mdiff --git a/MSPhotomAnalysis.py b/MSPhotomAnalysis.py[m
[1mindex 131d810..eaf9a35 100644[m
[1m--- a/MSPhotomAnalysis.py[m
[1m+++ b/MSPhotomAnalysis.py[m
[36m@@ -1,15 +1,29 @@[m
[32m+[m[32m"""[m
[32m+[m[32mPhotometry image analysis functions. Deal with actual processing of images into[m
[32m+[m[32msignal traces[m
[32m+[m[32m"""[m
[32m+[m
[32m+[m
 import os, numpy as np,tifffile as tf, time[m
 from matplotlib import pyplot[m
 from PIL import Image[m
 [m
[32m+[m[32mdef datetonum(date: str):[m
[32m+[m[32m    """[m
[32m+[m[32m    Convert a date string in the format 'MM-DD-YY' to a numerical representation.[m
 [m
[32m+[m[32m    Parameters[m
[32m+[m[32m    ----------[m
[32m+[m[32m    date : str[m
[32m+[m[32m        Date string in the format 'MM-DD-YY'.[m
 [m
[31m-# -----------------------------------------Analysis Functions/Classes------------------------------------[m
[31m-# Actual functions for data analysis. These are front and center as they are the MOST IMPORTANT part of the[m
[31m-# application. Make sure to write comments saying when/how/if the GUI calls a function.[m
[32m+[m[32m    Returns[m
[32m+[m[32m    -------[m
[32m+[m[32m    int[m
[32m+[m[32m        Date in numerical format.[m
 [m
[31m-def datetonum(date: str):[m
[31m-    assert isinstance(date, str), 'datetonum accepts strings only'[m
[32m+[m[32m    """[m
[32m+[m[41m    [m
     if len(date) != 8:[m
         return False[m
     if date[2] != "-" or date[5] != "-":[m
[36m@@ -27,10 +41,30 @@[m [mdef numtodate(numcode: int):[m
     m, d = divmod(d,32)[m
     return (str(m).zfill(2)+"-"+str(d).zfill(2)+"-"+str(y).zfill(2))[m
 [m
[32m+[m[32mdef npy_circlemask(sizex : int, sizey : int,circlex : int,circley : int,radius : int):[m
[32m+[m[32m    """[m
[32m+[m[32m    Creates a numpy mask array with a circle region. Is used for masking image[m[41m [m
[32m+[m[32m    files to pull only the selected fiber region.[m
[32m+[m
[32m+[m[32m    Parameters[m
[32m+[m[32m    ----------[m
[32m+[m[32m    sizex : in[m
[32m+[m[32m        DESCRIPTION.[m
[32m+[m[32m    sizey : TYPE[m
[32m+[m[32m        DESCRIPTION.[m
[32m+[m[32m    circlex : TYPE[m
[32m+[m[32m        DESCRIPTION.[m
[32m+[m[32m    circley : TYPE[m
[32m+[m[32m        DESCRIPTION.[m
[32m+[m[32m    radius : TYPE[m
[32m+[m[32m        DESCRIPTION.[m
 [m
[32m+[m[32m    Returns[m
[32m+[m[32m    -------[m
[32m+[m[32m    mask : np.array of numpy.bool_[m
[32m+[m[32m        Array of bool values to be used a mask over a specific circular region.[m
 [m
[31m-# Creates a numpy mask array with a circle region. Is used for masking image files to pull only the selected fiber region.[m
[31m-def npy_circlemask(sizex,sizey,circlex,circley,radius):[m
[32m+[m[32m    """[m
     mask = np.empty((sizex,sizey), dtype="bool_")[m
     for x in range(sizex):[m
         for y in range(sizey):[m
[36m@@ -41,6 +75,29 @@[m [mdef npy_circlemask(sizex,sizey,circlex,circley,radius):[m
     return mask[m
 [m
 def photomimageprocess(directory,imgprefix,masks,**kwargs):[m
[32m+[m[32m    """[m
[32m+[m[32m    Process images within a directory using provided masks to extract signal traces.[m
[32m+[m
[32m+[m[32m    Parameters[m
[32m+[m[32m    ----------[m
[32m+[m[32m    directory : str[m
[32m+[m[32m        Path to the directory containing the images.[m
[32m+[m[32m    imgprefix : str[m
[32m+[m[32m        prefix common to image filenames.[m
[32m+[m[32m    masks : list of numpy.ndarray[m
[32m+[m[32m        List containing masks for signal extraction.[m
[32m+[m[32m    **kwargs: Additional keyword arguments.[m
[32m+[m[32m      - waitbar (tkinter.ttk.Progressbar, optional): Tkinter Progressbar widget to display progress.[m
[32m+[m[32m      - textvar (tkinter.StringVar, optional): Tkinter StringVar to display text output.[m
[32m+[m[32m      - speedvar (tkinter.StringVar, optional): Tkinter StringVar to display processing speed.[m
[32m+[m
[32m+[m
[32m+[m[32m    Returns[m
[32m+[m[32m    -------[m
[32m+[m[32m    traces : list of numpy.ndarray[m
[32m+[m[32m        List containing signal traces extracted from the images.[m
[32m+[m
[32m+[m[32m    """[m
     waitbar = kwargs.get("waitbar", None)[m
     txtout = kwargs.get("textvar", None)[m
     speedvar = kwargs.get("speedvar",None)[m
[36m@@ -67,20 +124,68 @@[m [mdef photomimageprocess(directory,imgprefix,masks,**kwargs):[m
                 np.put(traces[j],i,avrgsig)[m
     return traces[m
 [m
[31m-def subtractbackgroundsignal(traces): #accepts a list of 1 dimensional numpy arrays[m
[31m-    #by convention, the first array in the list is the "Background" signal.[m
[32m+[m[32mdef subtractbackgroundsignal(traces):[m[41m [m
[32m+[m[32m    """[m
[32m+[m[32m    Subtract background signal from each trace.[m
[32m+[m
[32m+[m[32m    This function subtracts the background signal, represented by the first array in the list,[m[41m [m
[32m+[m[32m    from each subsequent array in the input list of traces.[m
[32m+[m
[32m+[m[32m    Parameters[m
[32m+[m[32m    ----------[m
[32m+[m[32m    traces : list of numpy.ndarray[m
[32m+[m[32m        DESCRIPTION.[m
[32m+[m
[32m+[m[32m    Returns[m
[32m+[m[32m    -------[m
[32m+[m[32m    subtrace : list of numpy.ndarray[m
[32m+[m[32m        List containing the traces data with background signal subtracted.[m
[32m+[m
[32m+[m[32m    """[m
     subtrace = [][m
     for i in range(1,len(traces)):[m
         subtrace.append(np.subtract(traces[i],traces[0]))[m
     return subtrace[m
 [m
 def splittraces(traces,channels):[m
[32m+[m[32m    """[m
[32m+[m[32m    Split traces data into individual channels.[m
[32m+[m
[32m+[m[32m    Parameters[m
[32m+[m[32m    ----------[m
[32m+[m[32m    traces : (list of numpy.ndarray)[m
[32m+[m[32m        List containing traces data..[m
[32m+[m[32m    channels : int[m
[32m+[m[32m        Number of channels in the traces data.[m
[32m+[m
[32m+[m[32m    Returns[m
[32m+[m[32m    -------[m
[32m+[m[32m    splittraces : TYPE[m
[32m+[m[32m        DESCRIPTION.[m
[32m+[m
[32m+[m[32m    """[m
     splittraces = [][m
     for i in range(len(traces)):[m
         for j in range(channels): splittraces.append(traces[i][j::channels])[m
     return splittraces[m
 [m
 def reshapetraces(traces,imgptrial):[m
[32m+[m[32m    """[m
[32m+[m[32m    Reshape traces data into a specified number of trials per image.[m
[32m+[m[41m    [m
[32m+[m[32m    Parameters[m
[32m+[m[32m    ----------[m
[32m+[m[32m    traces : (list of numpy.ndarray)[m
[32m+[m[32m        List containing traces data..[m
[32m+[m[32m    imgptrial : int[m
[32m+[m[32m        Number of trials per image.[m
[32m+[m
[32m+[m[32m    Returns[m
[32m+[m[32m    -------[m
[32m+[m[32m    reshapedtraces : (list of numpy.ndarray)[m
[32m+[m[32m        List containing reshaped traces data with specified trials per image.[m
[32m+[m
[32m+[m[32m    """[m
     reshapedtraces = [][m
     for i in range(len(traces)):[m
         size = np.prod(traces[i].shape)[m
[36m@@ -91,7 +196,21 @@[m [mdef reshapetraces(traces,imgptrial):[m
 [m
 [m
 def loadimg(path):[m
[32m+[m[32m    """[m
[32m+[m[32m    Load an image from the specified path.[m
[32m+[m
[32m+[m[32m    Parameters[m
[32m+[m[32m    ----------[m
[32m+[m[32m    path : str[m
[32m+[m[32m        pathlike object specifying location of image file.[m
[32m+[m
[32m+[m[32m    Returns[m
[32m+[m[32m    -------[m
[32m+[m[32m    imarray : np.array[m
[32m+[m[32m        Array representing pixels of image.[m
[32m+[m
[32m+[m[32m    """[m
     # img = tf.imread(path)[m
[31m-    img = Image.open(path)[m
[31m-    imarray = np.array(img)[m
[32m+[m[32m    with Image.open(path) as img:[m
[32m+[m[32m        imarray = np.array(img)[m
     return imarray[m
\ No newline at end of file[m
[1mdi